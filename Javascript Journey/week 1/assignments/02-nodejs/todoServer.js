/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app. 
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,
  1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos
    
  2.GET /todos/:id - Retrieve a specific todo item by ID
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123
    
  3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
    
  4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }
    
  5. DELETE /todos/:id - Delete a todo item by ID
    Description: Deletes a todo item identified by its ID.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123

    - For any other route not defined in the server return 404

  Testing the server - run `npm run test-todoServer` command in terminal
 */

  //imports
  const express = require('express');
  const app = express();
  const fs = require('fs');

  app.use(express.json());

  autoGeneratedId=()=>{
    return 'TD' + Math.random(10).toString().substring(2,16); // generatesRandom Id for every ToDo
  }

  saveResponse=(response)=>{
    fs.readFile("log.txt" , "utf-8" , function(err , data){
      console.log(typeof(response));
      let myDataString = data + "\n" +JSON.stringify(response);
      console.log(myDataString);
      fs.writeFile("log.txt" , myDataString , function(err , data){
        console.log("logged.")
      })
    })
  }

  //dummyDatabase
  toDos = [
    {
      title : 'TO_DO_1',
      description : 'Description_1',
      id : autoGeneratedId()
    },
    {
      title : 'TO_DO_2',
      description : 'Description_2',
      id : autoGeneratedId()
    }
  ]

  //FN'S
  fetchToDo = (ID)=>{
    flag = 0 ; todo = {}
    for( let i = 0 ; i < toDos.length; i++){ 
      if( toDos[i].id == ID)
      {
        todo = { TITLE : toDos[i].title,DESCRIPTION : toDos[i].description,TODO_ID : ID }
        flag = 1
      }
    }
    if(flag == 1){ return todo }
    else{ return false }
  }


  getIndexOfToDo = (ID)=>{
    flag = 0;
    for(let i = 0; i < toDos.length;i++){
      if(toDos[i].id == ID){
        flag = true;
        return i;
      }
    }
    if(flag == 0){
      return null;
    }
  }
  

  app.get('/todos' , (request , response)=>{
    statuS = 200
    saveResponse({
      msg : "Todos List",
      method :"GET",
      Status : statuS,
      ToDos  : toDos
    });
    response.status(200).send({toDos})
  });


  app.get('/todos/:id',(request , response)=>{
    const ID = request.params.id;  
    if(fetchToDo(ID)){
      statuS = 200;
      saveResponse({
        msg : "Particular Todo",
        method :"GET",
        Status : statuS,
        Id : ID
      });
      response.status(200).send( fetchToDo(ID) );
    }
    else{
      statuS = 404;
      saveResponse({
        msg : "Particular Todo",
        method :"GET",
        Status : statuS,
        Id : "TODO_NOT_FOUND"
      });
      response.status(404).send( "TODO_NOT_FOUND" )
    }
  })


  app.post('/todos' , (request,response)=>{

      const TITLE = request.body.title;
      const DESCRIPTION = request.body.description;
      const ID = autoGeneratedId(); 

      toDos.push({
        title :  TITLE,
        description : DESCRIPTION,
        id : ID
      });

      statuS = 201;
      saveResponse({
        msg : "POST_NEW_TODO",
        method :"POST",
        Status : statuS,
        Id : ID
      });
      

      response.status(201).json({ID})
  });


  app.put('/todos/:id' , (request,response)=>{
    const ID = request.params.id;
    const indexOfToDo = getIndexOfToDo(ID);
    if(indexOfToDo == null){
      response.status(404).json("NOT_FOUND");
      statuS = 404;
      saveResponse({
        msg : "UPDATE_TODO",
        method :"PUT",
        Status : statuS,
        Id : "NOT_FOUND"
      });
    }
    else{
      const description = request.body.description;
      toDos[indexOfToDo].description = description;
      response.status(200).json({})
      statuS = 200;
      saveResponse({
        msg : "UPDATE_TODO",
        method :"PUT",
        Status : statuS,
        Id : ID
      });
    }
  })

  app.delete('/todos/:id',(request, response)=>{
    const ID = request.params.id;
    const index = getIndexOfToDo(ID);
    console.log(index)
    if( index == null){
      response.status(404).json("NOT_FOUND")
      statuS = 404;
      saveResponse({
        msg : "DELETE_TODO",
        method :"DELETE",
        Status : statuS,
        Id : "NOT_FOUND"
      });
    }
    else{
      console.log(`Deleting TODO ${ID}...`);
      toDos.splice(index,1);
      response.status(200).json("FOUND AND DELETED")
      statuS = 200;
      saveResponse({
        msg : "DELETE_TODO",
        method :"DELETE",
        Status : statuS,
        Id : "FOUND AND DELETED"
      });
    }

  });


  app.get('*',(request , response)=>{
      response.status(404).send("404 NOT_FOUND");
      statuS = 404;
      saveResponse({
        msg : "TRIED TO ACCESS UNAIVALABLE PAGE",
        method :"GET",
        Status : statuS,
        Id : "404 NOT_FOUND"
      });
  })  

  app.listen( 5000 , ()=>{
      console.log("Listening...")
  });

  module.exports = app;